name: release

run-name: release for ${{ inputs.bump }}

on:
  workflow_dispatch:
    inputs:
      bump:
        type: choice
        description: Choose the type of bump
        default: patch
        options:
          - major
          - minor
          - patch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        id: next-release
        env:
          bump: ${{ inputs.bump }}
        with:
          script: |
            const { bump } = process.env
            console.log(`Bumping ${bump} version`);

            function log(message) {
              console.log(message);
            }

            function logError(error) {
              console.error('Error:', error);
              core.setFailed(error);
            }

            let latestRelease;
            try {
              const result = await github.rest.repos.getLatestRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
              });
              latestRelease = result.data.tag_name;
              log(`Latest release: ${latestRelease}`);
            }
            catch (error) {
              logError(`Failed to get latest release: ${error.message}`);
              return;
            }

            function bumpVersion(version, bump) {
              const hasPrefix = version.startsWith('v');
              const strippedVersion = hasPrefix ? version.substring(1) : version;

              let [major, minor, patch] = strippedVersion.split('.').map(num => parseInt(num, 10));

              switch (bump) {
                case 'major':
                  major += 1;
                  minor = 0;
                  patch = 0;
                  break;
                case 'minor':
                  minor += 1;
                  patch = 0;
                  break;
                case 'patch':
                  patch += 1;
                  break;
                default:
                  throw new Error('Invalid bump type');
              }

              return hasPrefix ? `v${major}.${minor}.${patch}` : `${major}.${minor}.${patch}`;
            }

            const nextVersion = bumpVersion(latestRelease, bump);
            log(`Next release: ${nextVersion}`);
            const nextVersionMajor = nextVersion.substring(0, nextVersion.indexOf('.'));
            log(`Next release major: ${nextVersionMajor}`);

            core.setOutput('version', nextVersion);
            core.setOutput('major', nextVersionMajor);

      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_USER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
          GIT_USER_NAME: "github-actions[bot]"
        run: |
          git config --local user.name $GIT_USER_NAME
          git config --local user.email $GIT_USER_EMAIL

          git tag -f "${{ steps.next-release.outputs.version }}"
          git push -f origin "${{ steps.next-release.outputs.version }}"

          git tag -f "${{ steps.next-release.outputs.major }}"
          git push -f origin "${{ steps.next-release.outputs.major }}"

          gh release create --generate-notes --latest "${{ steps.next-release.outputs.version }}"
